
MODULO 13
NodeJS API escalável com e sem Express
Profição Programador

// ============== introdução parte 01 ===================================================


// Verbos http

// GET -> Ler ou extrair um valor
// POST -> Enviar um valor
// PUT -> alterar ou atualizar um valor
// PATCH -> alterar um valor especifico
// DELETE -> deletar um valor

// HTTP codes

// 1xx -> informativos
// 2xx -> confirmação / sucesso
// 3xx -> redirecionamento
// 4xx -> erros no client
// 5xx -> erros no servidor

// id = 7483hdhs 

// Route Params

// https://profissaoprogramador.com.br/7483hdhs

// Query Params

// https://profissaoprogramador.com.br/?name=paulo&age=22&city=curitiba


// Body Params

// Corpo da requisição => na maioria das vezes para enviar dados do usuário, fazer login, fazer um cadastro nos vamos utilizar o corpo da requisição, ele não e enviado na rota.

// Header Params => vai servir para envio de informações adicionais.


// ============== introdução parte 02 ===================================================


// API -> Application programing interface (Interface de programação de aplicativos)

    APIs são mecanismos que permitem que dois componentes de software se comuniquem usando um conjunto de definições e protocolos. Por exemplo, o sistema de software do instituto meteorológico contém dados meteorológicos diários. A aplicação para a previsão do tempo em seu telefone “fala” com esse sistema por meio de APIs e mostra atualizações meteorológicas diárias no telefone.


// Rest quer dizer (Representation state transfer -> transferencia representacional de estado)

// REST é composto por 6 regras

// 1 - Client - servidor -> cada um deve ter responsabilidade a as responsabilidades deven ser únicas. então cada um tem o seu papel e não é preocupação de um o papel do outro.

// 2 - stateless -> o servidor não armazena estado das resquisições.

// 3 - cache -> a aplicação deve ter condições de uma implementação de cache (informação temporária)

// 4 - interface uniforme
    // - identificação de recursos
    // - representação de recursos
    // - mensagem descritivas
    // - hateoas

// 5 - aplicação dividida em camadas

// 6 - código sob demanda

// nodejs

// nodejs = é a junção da v8 + Libuv + conjunto de módulos

// single thread e non blocking I/O




/// =============== Primeiro Projeto - Parte 1 ==========================================

Comando: 

### npm init -y 

    => para criar o arquivo "package.json" que vai gerenciar as dependencia do nossos projetos pacotes externo  alem de outras coisas. O -y (é uma flag) para confirmar todas as perguntas que serão feitas, respondendo todas as perguntas automenticamente. 


### npm i express 
    
    => para criar a pasta "node_modules" e dependencia express.


    => criar no projeto uma pasta chamada "src" e dentro da pasta criar o arquivo "server.js"

        * no arquivo "server.js" acrescentar o código conforme abaixo:

        const express = require('express');
        const app = express();

        app.get('/', (request, response) => {
            response.send('Você acessou o servidor');
        })

        app.listen(4000);


### node .\src\server.js  => ´para rodar o nosso server*/

* depois de executar o comando "node .\src\server.js" para testar se o servidor está rodando, abra o Google Chrome => na barra de url digite: 

http://localhost:4000

* deve aparecer a mensagem "Você acessou o servidor"

*** OBS: cada vez que é alterado o arquivo "server.js" deve parar o servidor e executar o comando " node .\src\server.js " novamente.


/// =============== Primeiro Projeto - Parte 2 ==========================================

// implementar o carregamento automático da nossa aplicação em desenvolvimente
    (para não precisar ficar parando o servidor e executando novamente.)

### npm i nodemon -D => somente enquanto esta em desenvolvimento

=> no arquivo "package.json" do projeto acrescemtar no scripts =>  "dev": "nodemon src/server.js" como no exemplo abaixo

"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "nodemon src/server.js"
  },

  para rodar automenticamente executar o comando abaixo:

  npm run dev  



/// =============== Adicionando Types ===================================================



typescript 

* primeiro a ser feito e alterar a extensão do arquivo "server.js" para "server.ts" alterando a extensão de .js para .ts

Comando abaixo para converter typescript em JS

### npm i ts-node-dev -D

=> no arquivo "package.json" do projeto acrescemtar no scripts =>  "dev": "ts-node-dev src/server.ts" como no exemplo abaixo


  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "ts-node-dev src/server.ts"
  },


* no arquivo "server.ts" deletar a linha abaixo:

const express = require('express');

* e acrescentar a linha abaixo:

import express from 'express';



### npm i @types/express -D

### npm run dev



/// =============== Instalando Banco de dados ===========================================

* baixar o bando de dados MariaDB e instalar

* baixar o programa MySQL Workbench e instalar




/// =============== Conectando ao banco =================================================

na pasta src criar o arquivo "mysql.ts" 

depois de criado o arquivo "mysql.ts" executar o comando abaixo:

### npm i mysql => para intalar a biblioteca do sql;

### npm i @types/mysql -D =>

com o mysql e a tipagem do mysql instalado, faremos a criação dessa conexão com o banco de dados 

"mysql.ts"

import mysql from 'mysql';

const pool = mysql.createPool({
    "user": "root",
    "password":"1213275783",
    "database":"api-yt-project",
    "host":"localhost",
    "port": 3306
})

export { pool };





/// =============== Criando usuário =====================================================


### npm i uuid => biblioteca para criar id unicos

### npm i @types/uuid -D

"server.ts"

import express from 'express';
import { pool } from './mysql';
import { v4 as uuidv4 } from 'uuid';

const app = express();

app.use(express.json());

app.post('/user', (request, response) => {
    const { name, email, password } = request.body;
    pool.getConnection((err: any, connection: any) => {
        connection.query(
            'INSERT INTO users ( user_id, name, email, password ) VALUES (?,?,?,?)',
            [uuidv4(), name, email, password ],
            (error: any, result: any, fileds: any ) => {
                if (error) {
                    return response.status(400).json(error)
                }
                response.status(200).json({ success: true});
            }
        )
    })

})

app.listen(4000);


* depois executar o comando abaixo:

### npm run dev

no postman executar o post '/user'

/// =============== Criptografando senha ================================================


npm i bcrypt => biblioteca para criptografia da senha


import { hash } from 'bcrypt'; => no arquivo "server.ts"

npm i @types/bcrypt -D


/// =============== Autenticação ========================================================

// json web token => QUANDO o usuario recebe esse token de autenticação, podemos determinar um tempo de expiração do token, fazendo o usuario logar novamente caso esteja expirado

npm i jsonwebtoken => instalar package para token => que serve para 

npm i @types/jsonwebtoken -D



/// =============== Organizando rotas ===================================================

* na pasta src criar a pasta "routes"

* na pasta "routes" criar o arquivo "user.routes.ts"


/// =============== Variáveis de ambiente ===============================================

npm i dotenv

-> criar o arquivo na raiz do projeto ".env" 

-> no arquivo "server.ts" acrescentar o 

import { config } from 'dotenv';


/// =============== Gerando build =======================================================

npm i typescript -D

-> depois de instalado rodar o: 

npx tsc --init => vai gerar um arquivo "tsconfig.json"


=> no aqruivo "tsconfig.json" procurar ' // "outDir": "./", '


e descomentar e acrestar conforme abaixo

 "outDir": "./dist",   


e executar o comando: 


npx tsc

vai gerar uma pasta no projeto chamada 'dist'



=> no arquivo "package.json" acrescentar no script a linha build e start conforme abaixo

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "ts-node-dev src/server.ts",
    "build": "npx tsc",
    "start": "node ./dist/server.js"
  },


npm run build  => para gerar a pasta "dist" novamente (esta pasta não se atualiza sozinha se alterar alguma coisa no projeto tem que gerar novamente) OBS: apagar a pasta "dist" antes de garar novamente.

npm start => para estartar a aplicação



